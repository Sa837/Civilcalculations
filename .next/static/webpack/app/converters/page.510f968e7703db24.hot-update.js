"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/converters/page",{

/***/ "(app-pages-browser)/./lib/registry/converters.ts":
/*!************************************!*\
  !*** ./lib/registry/converters.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   categories: function() { return /* binding */ categories; },\n/* harmony export */   converters: function() { return /* binding */ converters; }\n/* harmony export */ });\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../convert */ \"(app-pages-browser)/./lib/convert.ts\");\n// Currency (Global)\nconst currencyGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"USD\", \"US Dollar\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.85, \"EUR\", \"Euro\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.75, \"GBP\", \"British Pound\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(110, \"JPY\", \"Japanese Yen\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(6.45, \"CNY\", \"Chinese Yuan\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1.35, \"AUD\", \"Australian Dollar\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1.25, \"CAD\", \"Canadian Dollar\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(75, \"INR\", \"Indian Rupee\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(120, \"NPR\", \"Nepalese Rupee\")\n];\n// Time & Date (Global, Nepali)\nconst timeGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.001, \"ms\", \"millisecond\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"s\", \"second\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(60, \"min\", \"minute\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3600, \"h\", \"hour\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(86400, \"day\", \"day\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(604800, \"week\", \"week\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(2629800, \"month\", \"month\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(31557600, \"year\", \"year\")\n];\nconst timeNepaliUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"BS\", \"Bikram Sambat\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"AD\", \"Gregorian\")\n];\n// Pressure / Stress (Global)\nconst pressureGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"Pa\", \"pascal\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000, \"kPa\", \"kilopascal\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000000, \"MPa\", \"megapascal\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(100000, \"bar\", \"bar\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(101325, \"atm\", \"atmosphere\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(6894.757, \"psi\", \"pound per square inch\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(47.8803, \"psf\", \"pound per square foot\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(133.322, \"Torr\", \"Torr\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(133.322, \"mmHg\", \"millimeter of mercury\")\n];\n// Force (Global)\nconst forceGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"N\", \"newton\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000, \"kN\", \"kilonewton\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000000, \"MN\", \"meganewton\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(9.80665, \"kgf\", \"kilogram-force\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(4.44822, \"lbf\", \"pound-force\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.00001, \"dyne\", \"dyne\")\n];\n// Energy / Work (Global)\nconst energyGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"J\", \"joule\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000, \"kJ\", \"kilojoule\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000000, \"MJ\", \"megajoule\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3600, \"Wh\", \"watt-hour\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3600000, \"kWh\", \"kilowatt-hour\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1055.06, \"BTU\", \"British thermal unit\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.239006, \"cal\", \"calorie\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(239.006, \"kcal\", \"kilocalorie\")\n];\n// Power (Global)\nconst powerGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"W\", \"watt\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000, \"kW\", \"kilowatt\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000000, \"MW\", \"megawatt\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000000000, \"GW\", \"gigawatt\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(745.7, \"hp\", \"horsepower\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3517, \"TR\", \"ton of refrigeration\")\n];\n// Density / Unit Weight (Global)\nconst densityGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"kg/m\\xb3\", \"kilogram per cubic meter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.001, \"g/cm\\xb3\", \"gram per cubic centimeter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(16.0185, \"lb/ft\\xb3\", \"pound per cubic foot\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(9.80665, \"kN/m\\xb3\", \"kilonewton per cubic meter\")\n];\n// Flow Rate (Global Volumetric, Global Mass)\nconst flowVolumetricUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"m\\xb3/s\", \"cubic meter per second\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000, \"L/s\", \"liter per second\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(60000, \"L/min\", \"liter per minute\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3600000, \"L/h\", \"liter per hour\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.0283168, \"ft\\xb3/s\", \"cubic foot per second\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1.699, \"ft\\xb3/min\", \"cubic foot per minute\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3.78541, \"US gpm\", \"US gallon per minute\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(4.54609, \"UK gpm\", \"UK gallon per minute\")\n];\nconst flowMassUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"kg/s\", \"kilogram per second\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(2.20462, \"lb/s\", \"pound per second\")\n];\n// Angle (Global)\nconst angleGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"degree\", \"degree\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.0174533, \"radian\", \"radian\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"grad\", \"gradian\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.57296, \"% slope\", \"percent slope\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"ratio\", \"ratio (1 in n)\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"tangent\", \"tangent\")\n];\n// Slope/Gradient (Global)\nconst slopeGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"rise/run\", \"rise/run\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"%\", \"percent\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"degree\", \"degree\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"ratio\", \"ratio (1:n)\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"mm/m\", \"millimeter per meter\")\n];\n// Temperature (Global)\nconst temperatureGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"\\xb0C\", \"Celsius\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(33.8, \"\\xb0F\", \"Fahrenheit\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(274.15, \"K\", \"Kelvin\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(493.47, \"\\xb0R\", \"Rankine\")\n];\n// Speed (Global)\nconst speedGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"m/s\", \"meter per second\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3.6, \"km/h\", \"kilometer per hour\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3.28084, \"ft/s\", \"foot per second\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(2.23694, \"mph\", \"mile per hour\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1.852, \"knot\", \"knot\")\n];\n\n// Length (grouped for tabs: Global, Indian, Nepali)\nconst lengthGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.001, \"mm\", \"millimeter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.01, \"cm\", \"centimeter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"m\", \"meter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000, \"km\", \"kilometer\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.0254, \"in\", \"inch\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.3048, \"ft\", \"foot\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.9144, \"yd\", \"yard\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1609.344, \"mi\", \"mile\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1e-9, \"nm\", \"nanometer\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1e-6, \"\\xb5m\", \"micrometer\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.201168, \"link\", \"link\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(20.1168, \"chain\", \"chain\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(5.0292, \"rod\", \"rod\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(201.168, \"furlong\", \"furlong\")\n];\nconst lengthIndianUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.01905, \"angul\", \"angul\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.4572, \"hath\", \"hath\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.9144, \"gaj\", \"gaj\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3.6576, \"danda\", \"danda\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3200, \"kos\", \"kos\")\n];\nconst lengthNepaliUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.4572, \"haat\", \"haat\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3.048, \"danda\", \"danda\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3200, \"kos\", \"kos\")\n];\n// Area (grouped for tabs: Global, Indian, Nepali)\nconst areaGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.000001, \"mm\\xb2\", \"square millimeter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.0001, \"cm\\xb2\", \"square centimeter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"m\\xb2\", \"square meter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(10000, \"ha\", \"hectare\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1e6, \"km\\xb2\", \"square kilometer\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.00155, \"in\\xb2\", \"square inch\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.09290304, \"ft\\xb2\", \"square foot\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.83612736, \"yd\\xb2\", \"square yard\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(4046.8564224, \"acre\", \"acre\")\n];\nconst areaIndianUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(126.44, \"bigha\", \"bigha\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(16.93, \"katha\", \"katha\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3.3445, \"dhur\", \"dhur\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(505.857, \"kanal\", \"kanal\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(25.2929, \"marla\", \"marla\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(203.0, \"ground\", \"ground\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(101.17, \"guntha\", \"guntha\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.836127, \"gaj\", \"gaj\")\n];\nconst areaNepaliUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(508.72, \"ropani\", \"ropani\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(31.80, \"aana\", \"aana\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(7.95, \"paisa\", \"paisa\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1.99, \"dam\", \"dam\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(6772.63, \"bigha\", \"bigha\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(338.63, \"kattha\", \"kattha\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(16.93, \"dhur\", \"dhur\")\n];\n// Volume (grouped for tabs: Global, Indian, Nepali)\nconst volumeGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.000000001, \"mm\\xb3\", \"cubic millimeter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.000001, \"cm\\xb3\", \"cubic centimeter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"m\\xb3\", \"cubic meter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.001, \"L\", \"liter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.000001, \"mL\", \"milliliter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.000016387064, \"in\\xb3\", \"cubic inch\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.028316846592, \"ft\\xb3\", \"cubic foot\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.764554857984, \"yd\\xb3\", \"cubic yard\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.003785411784, \"US gal\", \"US gallon\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.00454609, \"UK gal\", \"UK gallon\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.000946353, \"US qt\", \"US quart\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.000473176, \"US pt\", \"US pint\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.158987, \"barrel\", \"barrel\")\n];\nconst volumeIndianUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.9331, \"seer\", \"seer\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(37.3242, \"maund\", \"maund\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.0116638, \"tola\", \"tola\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.005, \"pathi\", \"pathi\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.000625, \"mana\", \"mana\")\n];\nconst volumeNepaliUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.00125, \"mana\", \"mana\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.01, \"pathi\", \"pathi\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.2, \"muri\", \"muri\")\n];\n// Mass (base: kilogram)\nconst massGlobalUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.000001, \"mg\", \"milligram\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.001, \"g\", \"gram\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"kg\", \"kilogram\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000, \"metric ton\", \"metric ton\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.028349523125, \"oz\", \"ounce\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.45359237, \"lb\", \"pound\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(6.35029, \"stone\", \"stone\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(907.185, \"US short ton\", \"US short ton\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1016.05, \"UK long ton\", \"UK long ton\")\n];\nconst massIndianUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.0116638, \"tola\", \"tola\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.000121, \"ratti\", \"ratti\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.014579, \"chatank\", \"chatank\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.9331, \"seer\", \"seer\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(37.3242, \"maund\", \"maund\")\n];\nconst massNepaliUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.0116638, \"tola\", \"tola\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.5, \"pau\", \"pau\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.0125, \"chatak\", \"chatak\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(2, \"dharni\", \"dharni\")\n];\n// Pressure (base: Pascal)\nconst pressureUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"Pa\", \"pascal\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000, \"kPa\", \"kilopascal\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000000, \"MPa\", \"megapascal\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(100000, \"bar\", \"bar\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(6894.757293168, \"psi\", \"pound per square inch\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(101325, \"atm\", \"atmosphere\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(133.3223684211, \"mmHg\", \"millimeter of mercury\")\n];\n// Speed (base: m/s)\nconst speedUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"m/s\", \"meter per second\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1 / 3.6, \"km/h\", \"kilometer per hour\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.44704, \"mph\", \"mile per hour\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.3048, \"ft/s\", \"foot per second\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.514444, \"knot\", \"knot\")\n];\n// Density (base: kg/m³)\nconst densityUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"kg/m\\xb3\", \"kilogram per cubic meter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000, \"g/cm\\xb3\", \"gram per cubic centimeter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(16.01846337396, \"lb/ft\\xb3\", \"pound per cubic foot\")\n];\n// Force (base: newton)\nconst forceUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"N\", \"newton\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000, \"kN\", \"kilonewton\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(4.4482216152605, \"lbf\", \"pound-force\")\n];\n// Energy (base: joule)\nconst energyUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"J\", \"joule\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000, \"kJ\", \"kilojoule\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3600, \"Wh\", \"watt-hour\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(3600000, \"kWh\", \"kilowatt-hour\")\n];\n// Length (Nepali) — local first\nconst nepaliLengthUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.4572, \"haat\", \"haat\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.2286, \"bitta\", \"bitta\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"m\", \"meter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.01, \"cm\", \"centimeter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.001, \"mm\", \"millimeter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1000, \"km\", \"kilometer\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.3048, \"ft\", \"foot\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.0254, \"in\", \"inch\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.9144, \"yd\", \"yard\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1609.344, \"mile\", \"mile\")\n];\n// Area (Nepali) — local first\nconst nepaliAreaUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(508.72, \"ropani\", \"ropani\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(31.80, \"aana\", \"aana\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(7.95, \"paisa\", \"paisa\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(16.931, \"dhur\", \"dhur\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"m\\xb2\", \"square meter\")\n];\n// Volume (Nepali) — local first\nconst nepaliVolumeUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.2, \"muri\", \"muri\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.01, \"pathi\", \"pathi\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.00125, \"mana\", \"mana\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.0003125, \"pau\", \"pau\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.001, \"liter\", \"liter\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"m\\xb3\", \"cubic meter\")\n];\n// Currency (base: USD). Static example rates; update as needed.\nconst currencyUnits = [\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1, \"USD\", \"$\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1.09, \"EUR\", \"€\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(1.28, \"GBP\", \"\\xa3\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.67, \"AUD\", \"A$\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.012, \"INR\", \"₹\"),\n    (0,_convert__WEBPACK_IMPORTED_MODULE_0__.linearUnit)(0.0075, \"NPR\", \"रू\")\n];\nconst converters = [\n    // Measure group\n    {\n        slug: \"length\",\n        title: \"Length\",\n        category: \"Measure\",\n        groups: [\n            {\n                name: \"Global\",\n                units: lengthGlobalUnits\n            },\n            {\n                name: \"Indian\",\n                units: lengthIndianUnits\n            },\n            {\n                name: \"Nepali\",\n                units: lengthNepaliUnits\n            }\n        ],\n        examples: [\n            \"1 meter = 1000 millimeters = 100 centimeters = 0.001 kilometers\",\n            \"1 meter = 39.3701 inches = 3.28084 feet = 1.09361 yards\",\n            \"1 hath ≈ 18 inches ≈ 1.5 feet ≈ 0.4572 meters\",\n            \"1 gaj ≈ 3 feet ≈ 0.9144 meters\",\n            \"1 haat ≈ 1.5 feet ≈ 0.4572 meters\",\n            \"1 danda ≈ 16.5 feet ≈ 5.0292 meters\"\n        ]\n    },\n    {\n        slug: \"area\",\n        title: \"Area\",\n        category: \"Measure\",\n        groups: [\n            {\n                name: \"Global\",\n                units: areaGlobalUnits\n            },\n            {\n                name: \"Indian\",\n                units: areaIndianUnits\n            },\n            {\n                name: \"Nepali\",\n                units: areaNepaliUnits\n            }\n        ],\n        examples: [\n            \"1 square meter = 10000 square millimeters = 10000 square centimeters\",\n            \"1 square meter = 10.7639 square feet = 1.19599 square yards\",\n            \"1 bigha (varies by state) ≈ 20,000 to 40,000 square feet\",\n            \"1 katha ≈ 720 square feet ≈ 66.89 square meters\",\n            \"1 ropani = 16 aana = 0.5086 acres ≈ 2,500 square feet\",\n            \"1 aana = 0.03125 ropani = 156.25 square feet\"\n        ]\n    },\n    {\n        slug: \"volume\",\n        title: \"Volume\",\n        category: \"Measure\",\n        groups: [\n            {\n                name: \"Global\",\n                units: volumeGlobalUnits\n            },\n            {\n                name: \"Indian\",\n                units: volumeIndianUnits\n            },\n            {\n                name: \"Nepali\",\n                units: volumeNepaliUnits\n            }\n        ],\n        examples: [\n            \"1 cubic meter = 1000 liters = 1,000,000 milliliters\",\n            \"1 cubic meter = 35.3147 cubic feet = 1,307.95 cubic yards\",\n            \"1 seer ≈ 0.9331 kilograms\",\n            \"1 maund ≈ 37.3242 kilograms\",\n            \"1 mana ≈ 1.3 kilograms\",\n            \"1 pathi ≈ 22.5 kilograms\"\n        ]\n    },\n    {\n        slug: \"mass\",\n        title: \"Mass / Weight\",\n        category: \"Properties\",\n        groups: [\n            {\n                name: \"Global\",\n                units: massGlobalUnits\n            },\n            {\n                name: \"Indian\",\n                units: massIndianUnits\n            },\n            {\n                name: \"Nepali\",\n                units: massNepaliUnits\n            }\n        ],\n        examples: [\n            \"1 kilogram = 1000 grams = 1,000,000 milligrams\",\n            \"1 kilogram = 2.20462 pounds = 0.157473 stone\",\n            \"1 tola ≈ 11.6638 grams\",\n            \"1 chatank ≈ 9.31 grams\",\n            \"1 pau ≈ 0.5 kilograms\"\n        ]\n    },\n    {\n        slug: \"currency\",\n        title: \"Currency\",\n        category: \"Currency\",\n        groups: [\n            {\n                name: \"Global\",\n                units: currencyGlobalUnits\n            }\n        ],\n        examples: [\n            \"1 USD ≈ 0.85 EUR ≈ 0.75 GBP ≈ 110 JPY ≈ 6.45 CNY ≈ 1.35 AUD ≈ 1.25 CAD ≈ 75 INR ≈ 120 NPR\"\n        ]\n    },\n    {\n        slug: \"time\",\n        title: \"Time & Date\",\n        category: \"Properties\",\n        groups: [\n            {\n                name: \"Global\",\n                units: timeGlobalUnits\n            },\n            {\n                name: \"Nepali\",\n                units: timeNepaliUnits\n            }\n        ],\n        examples: [\n            \"1 hour = 60 minutes = 3600 seconds\",\n            \"1 day = 24 hours = 1440 minutes\",\n            \"1 BS year ≈ 57.5 years ahead of AD\"\n        ]\n    },\n    {\n        slug: \"pressure\",\n        title: \"Pressure / Stress\",\n        category: \"Properties\",\n        groups: [\n            {\n                name: \"Global\",\n                units: pressureGlobalUnits\n            }\n        ],\n        examples: [\n            \"1 pascal = 1 newton per square meter\",\n            \"1 bar = 100,000 pascals = 0.986923 atm\"\n        ]\n    },\n    {\n        slug: \"force\",\n        title: \"Force\",\n        category: \"Properties\",\n        groups: [\n            {\n                name: \"Global\",\n                units: forceGlobalUnits\n            }\n        ],\n        examples: [\n            \"1 newton = 0.1019716 kilogram-force = 0.224809 pound-force\",\n            \"1 kilogram-force = 9.80665 newtons\"\n        ]\n    },\n    {\n        slug: \"energy\",\n        title: \"Energy / Work\",\n        category: \"Properties\",\n        groups: [\n            {\n                name: \"Global\",\n                units: energyGlobalUnits\n            }\n        ],\n        examples: [\n            \"1 joule = 0.000278 kilowatt-hours = 0.0009478 BTU\",\n            \"1 kilocalorie = 4184 joules\"\n        ]\n    },\n    {\n        slug: \"power\",\n        title: \"Power\",\n        category: \"Properties\",\n        groups: [\n            {\n                name: \"Global\",\n                units: powerGlobalUnits\n            }\n        ],\n        examples: [\n            \"1 watt = 1 joule per second\",\n            \"1 horsepower = 745.7 watts\",\n            \"1 ton of refrigeration = 3.517 kW\"\n        ]\n    },\n    {\n        slug: \"density\",\n        title: \"Density / Unit Weight\",\n        category: \"Properties\",\n        groups: [\n            {\n                name: \"Global\",\n                units: densityGlobalUnits\n            }\n        ],\n        examples: [\n            \"1 kilogram per cubic meter = 0.001 gram per cubic centimeter\",\n            \"1 kilogram per cubic meter = 0.06243 pound per cubic foot\"\n        ]\n    },\n    {\n        slug: \"flow-rate\",\n        title: \"Flow Rate\",\n        category: \"Properties\",\n        groups: [\n            {\n                name: \"Volumetric\",\n                units: flowVolumetricUnits\n            },\n            {\n                name: \"Mass\",\n                units: flowMassUnits\n            }\n        ],\n        examples: [\n            \"1 cubic meter per second = 1000 liters per second = 60,000 liters per minute\",\n            \"1 cubic foot per second = 28.3168 liters per second\",\n            \"1 kilogram per second = 2.20462 pounds per second\"\n        ]\n    },\n    {\n        slug: \"angle\",\n        title: \"Angle\",\n        category: \"Properties\",\n        groups: [\n            {\n                name: \"Global\",\n                units: angleGlobalUnits\n            }\n        ],\n        examples: [\n            \"1 degree = 0.0174533 radians = 100 gradians\",\n            \"1% slope = 0.57296 degrees\"\n        ]\n    },\n    {\n        slug: \"slope\",\n        title: \"Slope / Gradient\",\n        category: \"Properties\",\n        groups: [\n            {\n                name: \"Global\",\n                units: slopeGlobalUnits\n            }\n        ],\n        examples: [\n            \"1% slope = 1 meter rise per 100 meters run\",\n            \"1 degree = 1.74533% slope\"\n        ]\n    },\n    {\n        slug: \"temperature\",\n        title: \"Temperature\",\n        category: \"Properties\",\n        groups: [\n            {\n                name: \"Global\",\n                units: temperatureGlobalUnits\n            }\n        ],\n        examples: [\n            \"\\xb0F = (\\xb0C \\xd7 9/5) + 32\",\n            \"K = \\xb0C + 273.15\"\n        ]\n    },\n    {\n        slug: \"speed\",\n        title: \"Speed\",\n        category: \"Properties\",\n        groups: [\n            {\n                name: \"Global\",\n                units: speedGlobalUnits\n            }\n        ],\n        examples: [\n            \"1 meter per second = 3.6 kilometers per hour = 3.28084 feet per second\",\n            \"1 knot = 1.852 kilometers per hour\"\n        ]\n    }\n];\nconst categories = [\n    \"Measure\",\n    \"Nepali\",\n    \"Properties\",\n    \"Currency\"\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/registry/converters.ts\n"));

/***/ })

});