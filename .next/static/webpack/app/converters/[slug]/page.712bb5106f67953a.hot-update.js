"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/converters/[slug]/page",{

/***/ "(app-pages-browser)/./lib/bs-ad-date.ts":
/*!***************************!*\
  !*** ./lib/bs-ad-date.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adToBs: function() { return /* binding */ adToBs; },\n/* harmony export */   bsToAd: function() { return /* binding */ bsToAd; }\n/* harmony export */ });\n/* harmony import */ var bikram_sambat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bikram-sambat-js */ \"(app-pages-browser)/./node_modules/bikram-sambat-js/dist/index.es.js\");\n// Accurate AD <-> BS date conversion using bikram-sambat-js\n\nconst adMonths = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n];\nconst bsMonths = [\n    \"Baisakh\",\n    \"Jestha\",\n    \"Ashadh\",\n    \"Shrawan\",\n    \"Bhadra\",\n    \"Ashwin\",\n    \"Kartik\",\n    \"Mangsir\",\n    \"Poush\",\n    \"Magh\",\n    \"Falgun\",\n    \"Chaitra\"\n];\nfunction adToBs(adYear, adMonth, adDate) {\n    const monthNum = adMonths.indexOf(adMonth) + 1;\n    if (!monthNum) return \"Invalid month\";\n    try {\n        const adStr = \"\".concat(adYear, \"-\").concat(monthNum.toString().padStart(2, \"0\"), \"-\").concat(adDate.padStart(2, \"0\"));\n        const bsStr = (0,bikram_sambat_js__WEBPACK_IMPORTED_MODULE_0__.ADToBS)(adStr); // e.g. '2082-05-22'\n        if (!bsStr || typeof bsStr !== \"string\") return \"Conversion not available\";\n        const [bsYear, bsMonthNum, bsDay] = bsStr.split(\"-\");\n        return \"\".concat(Number(bsDay), \" \").concat(bsMonths[Number(bsMonthNum) - 1], \" \").concat(bsYear);\n    } catch (e) {\n        return \"Conversion not available\";\n    }\n}\nfunction bsToAd(bsYear, bsMonth, bsDate) {\n    const monthNum = bsMonths.indexOf(bsMonth) + 1;\n    if (!monthNum) return \"Invalid month\";\n    try {\n        const bsStr = \"\".concat(bsYear, \"-\").concat(monthNum.toString().padStart(2, \"0\"), \"-\").concat(bsDate.padStart(2, \"0\"));\n        const adStr = (0,bikram_sambat_js__WEBPACK_IMPORTED_MODULE_0__.BSToAD)(bsStr); // e.g. '2025-09-07'\n        if (!adStr || typeof adStr !== \"string\") return \"Conversion not available\";\n        const [adYear, adMonthNum, adDay] = adStr.split(\"-\");\n        return \"\".concat(Number(adDay), \" \").concat(adMonths[Number(adMonthNum) - 1], \" \").concat(adYear);\n    } catch (e) {\n        return \"Conversion not available\";\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9icy1hZC1kYXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDREQUE0RDtBQUNJO0FBRWhFLE1BQU1FLFdBQVc7SUFDZjtJQUFVO0lBQVc7SUFBUTtJQUFRO0lBQU07SUFBTztJQUFPO0lBQVM7SUFBWTtJQUFVO0lBQVc7Q0FDcEc7QUFDRCxNQUFNQyxXQUFXO0lBQ2Y7SUFBVTtJQUFTO0lBQVM7SUFBVTtJQUFTO0lBQVM7SUFBUztJQUFVO0lBQVE7SUFBTztJQUFTO0NBQ3BHO0FBR00sU0FBU0MsT0FBT0MsTUFBYyxFQUFFQyxPQUFlLEVBQUVDLE1BQWM7SUFDcEUsTUFBTUMsV0FBV04sU0FBU08sT0FBTyxDQUFDSCxXQUFXO0lBQzdDLElBQUksQ0FBQ0UsVUFBVSxPQUFPO0lBQ3RCLElBQUk7UUFDRixNQUFNRSxRQUFRLEdBQWFGLE9BQVZILFFBQU8sS0FBMkNFLE9BQXhDQyxTQUFTRyxRQUFRLEdBQUdDLFFBQVEsQ0FBQyxHQUFHLE1BQUssS0FBMkIsT0FBeEJMLE9BQU9LLFFBQVEsQ0FBQyxHQUFHO1FBQ3RGLE1BQU1DLFFBQVFiLHdEQUFNQSxDQUFDVSxRQUFRLG9CQUFvQjtRQUNqRCxJQUFJLENBQUNHLFNBQVMsT0FBT0EsVUFBVSxVQUFVLE9BQU87UUFDaEQsTUFBTSxDQUFDQyxRQUFRQyxZQUFZQyxNQUFNLEdBQUdILE1BQU1JLEtBQUssQ0FBQztRQUNoRCxPQUFPLEdBQW9CZCxPQUFqQmUsT0FBT0YsUUFBTyxLQUF1Q0YsT0FBcENYLFFBQVEsQ0FBQ2UsT0FBT0gsY0FBYyxFQUFFLEVBQUMsS0FBVSxPQUFQRDtJQUNqRSxFQUFFLFVBQU07UUFDTixPQUFPO0lBQ1Q7QUFDRjtBQUVPLFNBQVNLLE9BQU9MLE1BQWMsRUFBRU0sT0FBZSxFQUFFQyxNQUFjO0lBQ3BFLE1BQU1iLFdBQVdMLFNBQVNNLE9BQU8sQ0FBQ1csV0FBVztJQUM3QyxJQUFJLENBQUNaLFVBQVUsT0FBTztJQUN0QixJQUFJO1FBQ0YsTUFBTUssUUFBUSxHQUFhTCxPQUFWTSxRQUFPLEtBQTJDTyxPQUF4Q2IsU0FBU0csUUFBUSxHQUFHQyxRQUFRLENBQUMsR0FBRyxNQUFLLEtBQTJCLE9BQXhCUyxPQUFPVCxRQUFRLENBQUMsR0FBRztRQUN0RixNQUFNRixRQUFRVCx3REFBTUEsQ0FBQ1ksUUFBUSxvQkFBb0I7UUFDakQsSUFBSSxDQUFDSCxTQUFTLE9BQU9BLFVBQVUsVUFBVSxPQUFPO1FBQ2hELE1BQU0sQ0FBQ0wsUUFBUWlCLFlBQVlDLE1BQU0sR0FBR2IsTUFBTU8sS0FBSyxDQUFDO1FBQ2hELE9BQU8sR0FBb0JmLE9BQWpCZ0IsT0FBT0ssUUFBTyxLQUF1Q2xCLE9BQXBDSCxRQUFRLENBQUNnQixPQUFPSSxjQUFjLEVBQUUsRUFBQyxLQUFVLE9BQVBqQjtJQUNqRSxFQUFFLFVBQU07UUFDTixPQUFPO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvYnMtYWQtZGF0ZS50cz8xMmZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFjY3VyYXRlIEFEIDwtPiBCUyBkYXRlIGNvbnZlcnNpb24gdXNpbmcgYmlrcmFtLXNhbWJhdC1qc1xyXG5pbXBvcnQgQmlrcmFtU2FtYmF0LCB7IEFEVG9CUywgQlNUb0FEIH0gZnJvbSAnYmlrcmFtLXNhbWJhdC1qcyc7XHJcblxyXG5jb25zdCBhZE1vbnRocyA9IFtcclxuICAnSmFudWFyeScsJ0ZlYnJ1YXJ5JywnTWFyY2gnLCdBcHJpbCcsJ01heScsJ0p1bmUnLCdKdWx5JywnQXVndXN0JywnU2VwdGVtYmVyJywnT2N0b2JlcicsJ05vdmVtYmVyJywnRGVjZW1iZXInXHJcbl07XHJcbmNvbnN0IGJzTW9udGhzID0gW1xyXG4gICdCYWlzYWtoJywnSmVzdGhhJywnQXNoYWRoJywnU2hyYXdhbicsJ0JoYWRyYScsJ0FzaHdpbicsJ0thcnRpaycsJ01hbmdzaXInLCdQb3VzaCcsJ01hZ2gnLCdGYWxndW4nLCdDaGFpdHJhJ1xyXG5dO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZFRvQnMoYWRZZWFyOiBzdHJpbmcsIGFkTW9udGg6IHN0cmluZywgYWREYXRlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIGNvbnN0IG1vbnRoTnVtID0gYWRNb250aHMuaW5kZXhPZihhZE1vbnRoKSArIDE7XHJcbiAgaWYgKCFtb250aE51bSkgcmV0dXJuICdJbnZhbGlkIG1vbnRoJztcclxuICB0cnkge1xyXG4gICAgY29uc3QgYWRTdHIgPSBgJHthZFllYXJ9LSR7bW9udGhOdW0udG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfS0ke2FkRGF0ZS5wYWRTdGFydCgyLCAnMCcpfWA7XHJcbiAgICBjb25zdCBic1N0ciA9IEFEVG9CUyhhZFN0cik7IC8vIGUuZy4gJzIwODItMDUtMjInXHJcbiAgICBpZiAoIWJzU3RyIHx8IHR5cGVvZiBic1N0ciAhPT0gJ3N0cmluZycpIHJldHVybiAnQ29udmVyc2lvbiBub3QgYXZhaWxhYmxlJztcclxuICAgIGNvbnN0IFtic1llYXIsIGJzTW9udGhOdW0sIGJzRGF5XSA9IGJzU3RyLnNwbGl0KCctJyk7XHJcbiAgICByZXR1cm4gYCR7TnVtYmVyKGJzRGF5KX0gJHtic01vbnRoc1tOdW1iZXIoYnNNb250aE51bSkgLSAxXX0gJHtic1llYXJ9YDtcclxuICB9IGNhdGNoIHtcclxuICAgIHJldHVybiAnQ29udmVyc2lvbiBub3QgYXZhaWxhYmxlJztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBic1RvQWQoYnNZZWFyOiBzdHJpbmcsIGJzTW9udGg6IHN0cmluZywgYnNEYXRlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIGNvbnN0IG1vbnRoTnVtID0gYnNNb250aHMuaW5kZXhPZihic01vbnRoKSArIDE7XHJcbiAgaWYgKCFtb250aE51bSkgcmV0dXJuICdJbnZhbGlkIG1vbnRoJztcclxuICB0cnkge1xyXG4gICAgY29uc3QgYnNTdHIgPSBgJHtic1llYXJ9LSR7bW9udGhOdW0udG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfS0ke2JzRGF0ZS5wYWRTdGFydCgyLCAnMCcpfWA7XHJcbiAgICBjb25zdCBhZFN0ciA9IEJTVG9BRChic1N0cik7IC8vIGUuZy4gJzIwMjUtMDktMDcnXHJcbiAgICBpZiAoIWFkU3RyIHx8IHR5cGVvZiBhZFN0ciAhPT0gJ3N0cmluZycpIHJldHVybiAnQ29udmVyc2lvbiBub3QgYXZhaWxhYmxlJztcclxuICAgIGNvbnN0IFthZFllYXIsIGFkTW9udGhOdW0sIGFkRGF5XSA9IGFkU3RyLnNwbGl0KCctJyk7XHJcbiAgICByZXR1cm4gYCR7TnVtYmVyKGFkRGF5KX0gJHthZE1vbnRoc1tOdW1iZXIoYWRNb250aE51bSkgLSAxXX0gJHthZFllYXJ9YDtcclxuICB9IGNhdGNoIHtcclxuICAgIHJldHVybiAnQ29udmVyc2lvbiBub3QgYXZhaWxhYmxlJztcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkFEVG9CUyIsIkJTVG9BRCIsImFkTW9udGhzIiwiYnNNb250aHMiLCJhZFRvQnMiLCJhZFllYXIiLCJhZE1vbnRoIiwiYWREYXRlIiwibW9udGhOdW0iLCJpbmRleE9mIiwiYWRTdHIiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwiYnNTdHIiLCJic1llYXIiLCJic01vbnRoTnVtIiwiYnNEYXkiLCJzcGxpdCIsIk51bWJlciIsImJzVG9BZCIsImJzTW9udGgiLCJic0RhdGUiLCJhZE1vbnRoTnVtIiwiYWREYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/bs-ad-date.ts\n"));

/***/ })

});